// src/pages/ung-dung/HuongNhaHopTuoiPage.js
import React, { useState, useRef } from 'react';
import Header from '../../components/Header/Header';
import Footer from '../../components/Footer/Footer';
import FloatButtons from '../../components/FloatButtons/FloatButtons';
import CTAContent from '../../components/CTAContent/CTAContent';
import '../../styles/CommonStyles.css';

const HuongNhaHopTuoiPage = () => {
    const [formData, setFormData] = useState({
        namSinh: '',
        gioiTinh: 'nam',
        thangSinh: '1',
        ngaySinh: '1',
        huongNha: ''
    });
    const [loading, setLoading] = useState(false);
    const [result, setResult] = useState('');
    const [activeFaq, setActiveFaq] = useState(null);
    const resultRef = useRef(null);

    // Available Gemini API keys
    const geminiKeys = [
        'AIzaSyAxfaDXqfJESn-UiV_PrILhihyvFU6QkGw',
        'AIzaSyDEsifzFyaPY5zca8mp2sHnj41k_PVuiTQ',
        'AIzaSyColbzIN-yDFj4uKtF6DWSU9IU8B84AvsM',
        'AIzaSyC_jOHN_XYMIzneO9dMk_pGiP4rea3QPNQ',
        'AIzaSyC3SCrar3EW92GIwQGjUd13Ebcn22swQoM',
        'AIzaSyBo-fIsTKQs3j3ElXRhRjv79mfRplWHNYc',
        'AIzaSyDimh_A65SYjmtZoR_Sl0-bZKXmKvPDXrA',
        'AIzaSyAKWtKWb_ozSCAI97WWhcgm_EB8pgvWzK4',
        'AIzaSyDLvxbXVN1ycTF87urbQEjN3L-XhchvhKE',
        'AIzaSyCyJG-f3tRgY1SlrUaMQxjILms7hzo3mWI',
        'AIzaSyAq2UIxBBFrrGlb_pA7z1GHKVTqy4Qeiig',
        'AIzaSyAc2BUU5jxtWMVYTO28JsFu9n7w2-ud-qA',
        'AIzaSyBCHK8-SGyHHG24t7yy5HzpKhveJFdk1qs',
        'AIzaSyDM63DmLwNb5LKHbZFj-mwYT0aBcBDbZLg',
        'AIzaSyA6OeXY3-bLknr6Nh97dGWAbnFqQ4BNytg',
        'AIzaSyDSc3eaBTApLN4rV0agw8xgqgQTPwr3q4c',
        'AIzaSyBEZOICOKkDnvDR03n-yvpqeNN1svsFneg',
        'AIzaSyCx4fnrgUKY0QJFoaTXybuH46tLMGnEa8k'
    ];

    const months = Array.from({ length: 12 }, (_, i) => ({
        value: String(i + 1),
        label: `Th√°ng ${i + 1}`
    }));

    const days = Array.from({ length: 31 }, (_, i) => ({
        value: String(i + 1),
        label: `Ng√†y ${i + 1}`
    }));

    const directions = [
        { value: 'ƒê√¥ng', label: 'ƒê√¥ng', description: 'H∆∞·ªõng m·∫∑t tr·ªùi m·ªçc', icon: 'üåÖ' },
        { value: 'T√¢y', label: 'T√¢y', description: 'H∆∞·ªõng m·∫∑t tr·ªùi l·∫∑n', icon: 'üåá' },
        { value: 'Nam', label: 'Nam', description: 'H∆∞·ªõng ·∫•m √°p, ƒë√≥n n·∫Øng', icon: '‚òÄÔ∏è' },
        { value: 'B·∫Øc', label: 'B·∫Øc', description: 'H∆∞·ªõng m√°t m·∫ª, ·ªïn ƒë·ªãnh', icon: '‚ùÑÔ∏è' },
        { value: 'ƒê√¥ng B·∫Øc', label: 'ƒê√¥ng B·∫Øc', description: 'H∆∞·ªõng ph·ª•, th√≠ch h·ª£p vƒÉn ph√≤ng', icon: 'üß≠' },
        { value: 'ƒê√¥ng Nam', label: 'ƒê√¥ng Nam', description: 'H∆∞·ªõng t√†i l·ªôc, th·ªãnh v∆∞·ª£ng', icon: 'üí∞' },
        { value: 'T√¢y B·∫Øc', label: 'T√¢y B·∫Øc', description: 'H∆∞·ªõng quy·ªÅn l·ª±c, uy t√≠n', icon: 'üëë' },
        { value: 'T√¢y Nam', label: 'T√¢y Nam', description: 'H∆∞·ªõng gia ƒë√¨nh, h·∫°nh ph√∫c', icon: '‚ù§Ô∏è' }
    ];

    const faqData = [
        {
            question: "L√†m th·∫ø n√†o ƒë·ªÉ x√°c ƒë·ªãnh h∆∞·ªõng nh√† ch√≠nh x√°c?",
            answer: "B·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng la b√†n ho·∫∑c ·ª©ng d·ª•ng la b√†n tr√™n ƒëi·ªán tho·∫°i ƒë·ªÉ x√°c ƒë·ªãnh h∆∞·ªõng c·ª≠a ch√≠nh c·ªßa ng√¥i nh√†. ƒê·ª©ng ·ªü c·ª≠a ch√≠nh v√† quay m·∫∑t ra ngo√†i ƒë·ªÉ ƒëo h∆∞·ªõng. N·∫øu kh√¥ng ch·∫Øc ch·∫Øn, h√£y ƒëo v√†o nhi·ªÅu th·ªùi ƒëi·ªÉm kh√°c nhau v√† l·∫•y k·∫øt qu·∫£ trung b√¨nh."
        },
        {
            question: "T·∫°i sao tu·ªïi t√°c ·∫£nh h∆∞·ªüng ƒë·∫øn h∆∞·ªõng nh√†?",
            answer: "Theo phong th·ªßy, m·ªói ng∆∞·ªùi c√≥ m·ªôt h∆∞·ªõng t·ªët d·ª±a tr√™n nƒÉm sinh v√† gi·ªõi t√≠nh. ƒêi·ªÅu n√†y ƒë∆∞·ª£c t√≠nh to√°n d·ª±a tr√™n h·ªá th·ªëng B√°t Tr·∫°ch phong th·ªßy, trong ƒë√≥ c√≥ 4 h∆∞·ªõng t·ªët v√† 4 h∆∞·ªõng x·∫•u cho m·ªói ng∆∞·ªùi."
        },
        {
            question: "C√≥ n√™n thay ƒë·ªïi h∆∞·ªõng c·ª≠a ch√≠nh kh√¥ng?",
            answer: "Vi·ªác thay ƒë·ªïi h∆∞·ªõng c·ª≠a ch√≠nh c·∫ßn ƒë∆∞·ª£c c√¢n nh·∫Øc k·ªπ l∆∞·ª°ng v√¨ chi ph√≠ cao v√† ph·ª©c t·∫°p v·ªÅ m·∫∑t ki·∫øn tr√∫c. Thay v√†o ƒë√≥, b·∫°n c√≥ th·ªÉ s·ª≠ d·ª•ng c√°c bi·ªán ph√°p h√≥a gi·∫£i nh∆∞ ƒë·∫∑t g∆∞∆°ng, c√¢y xanh, ho·∫∑c thay ƒë·ªïi m√†u s·∫Øc."
        },
        {
            question: "H∆∞·ªõng nh√† ·∫£nh h∆∞·ªüng g√¨ ƒë·∫øn cu·ªôc s·ªëng?",
            answer: "H∆∞·ªõng nh√† ph√π h·ª£p c√≥ th·ªÉ mang l·∫°i s·ª©c kh·ªèe t·ªët, t√†i v·∫≠n th·ªãnh v∆∞·ª£ng, gia ƒë√¨nh h·∫°nh ph√∫c v√† s·ª± nghi·ªáp thu·∫≠n l·ª£i. Ng∆∞·ª£c l·∫°i, h∆∞·ªõng kh√¥ng ph√π h·ª£p c√≥ th·ªÉ g√¢y ra kh√≥ khƒÉn v·ªÅ t√†i ch√≠nh, s·ª©c kh·ªèe v√† c√°c m·ªëi quan h·ªá."
        },
        {
            question: "C√≥ c·∫ßn xem h∆∞·ªõng nh√† cho t·∫•t c·∫£ th√†nh vi√™n?",
            answer: "Ch·ªß y·∫øu xem h∆∞·ªõng nh√† cho ch·ªß h·ªô (ng∆∞·ªùi ƒë·ª©ng t√™n nh√†). Tuy nhi√™n, n√™n tham kh·∫£o h∆∞·ªõng t·ªët c·ªßa v·ª£/ch·ªìng ƒë·ªÉ ƒë·∫£m b·∫£o h√†i h√≤a. N·∫øu c√≥ xung ƒë·ªôt, ∆∞u ti√™n ng∆∞·ªùi c√≥ ·∫£nh h∆∞·ªüng l·ªõn nh·∫•t trong gia ƒë√¨nh."
        }
    ];

    const getRandomGeminiKey = () => {
        return geminiKeys[Math.floor(Math.random() * geminiKeys.length)];
    };

    const formatAIResponse = (text) => {
        if (!text) return text;

        // Format headings with ** to bold
        let formatted = text.replace(/\*\*(.*?)\*\*/g, '<strong style="color: #2d3748; font-size: 1.15em; display: block; margin: 1rem 0 0.5rem 0;">$1</strong>');

        // Format numbered lists
        formatted = formatted.replace(/^(\d+\.\s.*$)/gm, '<div style="margin: 1.5rem 0; padding: 1.2rem; background: linear-gradient(135deg, #f8fafc 0%, #e3f2fd 100%); border-left: 4px solid #667eea; border-radius: 0 12px 12px 0; box-shadow: 0 4px 12px rgba(102, 126, 234, 0.15);"><strong style="color: #667eea; font-size: 1.1em;">$1</strong></div>');

        // Format bullet points with ***
        formatted = formatted.replace(/^\*\*\*(.*$)/gm, '<div style="margin: 1rem 0; padding: 1rem; background: linear-gradient(135deg, #f0f9ff 0%, #e0f7fa 100%); border-left: 3px solid #10b981; border-radius: 0 10px 10px 0; box-shadow: 0 2px 8px rgba(16, 185, 129, 0.1);"><strong style="color: #10b981; margin-right: 0.5rem;">‚Üí</strong> <span style="color: #1e40af; font-weight: 500;">$1</span></div>');

        // Format sub-bullets with **
        formatted = formatted.replace(/^\*\*(.*$)/gm, '<div style="margin: 0.75rem 0 0.75rem 2rem; color: #4f46e5; padding: 0.5rem 0; border-bottom: 1px solid #e2e8f0;"><strong style="color: #059669; margin-right: 0.5rem;">‚Ä¢</strong> <span style="font-weight: 500;">$1</span></div>');

        // Format single bullets with *
        formatted = formatted.replace(/^\*((?!\*).*)$/gm, '<div style="margin: 0.5rem 0 0.5rem 2.5rem; color: #374151; padding: 0.25rem 0;">‚Ä¢ $1</div>');

        // Format paragraphs
        formatted = formatted.replace(/\n\n/g, '<br><br>');
        formatted = formatted.replace(/\n/g, '<br>');

        return formatted;
    };

    const callGeminiAPI = async (apiKey, prompt, retryCount = 0) => {
        try {
            const response = await fetch(`https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    contents: [{
                        parts: [{
                            text: prompt
                        }]
                    }]
                })
            });

            if (!response.ok) {
                if ((response.status === 503 || response.status === 429) && retryCount < 3) {
                    console.log(`API Error ${response.status}. Retry ${retryCount + 1}/3 with different key...`);
                    const newApiKey = getRandomGeminiKey();
                    await new Promise(resolve => setTimeout(resolve, 2000 * (retryCount + 1)));
                    return callGeminiAPI(newApiKey, prompt, retryCount + 1);
                }
                throw new Error(`${response.status}: ${response.statusText}`);
            }

            const data = await response.json();
            if (!data.candidates || !data.candidates[0] || !data.candidates[0].content) {
                throw new Error('Kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ AI');
            }

            return data.candidates[0].content.parts[0].text;
        } catch (error) {
            if (retryCount < 3 && (error.name === 'TypeError' || error.message.includes('fetch'))) {
                console.log(`Network error. Retry ${retryCount + 1}/3 with different key...`);
                const newApiKey = getRandomGeminiKey();
                await new Promise(resolve => setTimeout(resolve, 2000 * (retryCount + 1)));
                return callGeminiAPI(newApiKey, prompt, retryCount + 1);
            }
            throw error;
        }
    };

    const scrollToResult = () => {
        setTimeout(() => {
            if (resultRef.current) {
                resultRef.current.scrollIntoView({
                    behavior: 'smooth',
                    block: 'start',
                    inline: 'nearest'
                });
            }
        }, 100);
    };

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: value
        }));
    };

    const consultGemini = async () => {
        if (!formData.namSinh || !formData.huongNha) {
            alert('Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß nƒÉm sinh v√† h∆∞·ªõng nh√†!');
            return;
        }

        const currentYear = new Date().getFullYear();
        const birthYear = parseInt(formData.namSinh);

        if (birthYear < 1900 || birthYear > currentYear) {
            alert('NƒÉm sinh kh√¥ng h·ª£p l·ªá!');
            return;
        }

        setLoading(true);
        setResult('');

        try {
            const apiKey = getRandomGeminiKey();
            const age = currentYear - birthYear;

            const prompt = `B·∫°n l√† chuy√™n gia phong th·ªßy Vi·ªát Nam chuy√™n v·ªÅ h∆∞·ªõng nh√†. H√£y ph√¢n t√≠ch chi ti·∫øt v√† t∆∞ v·∫•n v·ªÅ h∆∞·ªõng nh√† h·ª£p tu·ªïi cho:

**TH√îNG TIN KH√ÅCH H√ÄNG:**
***Ng√†y sinh:** ${formData.ngaySinh}/${formData.thangSinh}/${formData.namSinh} (${age} tu·ªïi)
***Gi·ªõi t√≠nh:** ${formData.gioiTinh}
***H∆∞·ªõng nh√† hi·ªán t·∫°i:** ${formData.huongNha}

**Y√äU C·∫¶U PH√ÇN T√çCH:**

**1. PH√ÇN T√çCH M·ªÜNH V√Ä H∆Ø·ªöNG:**
***X√°c ƒë·ªãnh m·ªánh theo nƒÉm sinh** (Kim, M·ªôc, Th·ªßy, H·ªèa, Th·ªï)
***Ph√¢n t√≠ch h∆∞·ªõng ${formData.huongNha}** theo h·ªá th·ªëng B√°t Tr·∫°ch
***ƒê·ªô t∆∞∆°ng h·ª£p** gi·ªØa m·ªánh v√† h∆∞·ªõng nh√† (ƒëi·ªÉm t·ª´ 1-10)

**2. ƒê√ÅNH GI√Å H∆Ø·ªöNG NH√Ä HI·ªÜN T·∫†I:**
***∆Øu ƒëi·ªÉm c·ªßa h∆∞·ªõng ${formData.huongNha}** cho ng∆∞·ªùi n√†y
***Nh∆∞·ª£c ƒëi·ªÉm v√† nh·ªØng ƒëi·ªÅu c·∫ßn l∆∞u √Ω**
***T√°c ƒë·ªông ƒë·∫øn s·ª©c kh·ªèe, t√†i v·∫≠n, gia ƒë√¨nh**

**3. L·ªúI KHUY√äN C·∫¢I THI·ªÜN:**
***C√°ch t·ªëi ∆∞u h√≥a h∆∞·ªõng ${formData.huongNha}**
***M√†u s·∫Øc, v·∫≠t li·ªáu n√™n s·ª≠ d·ª•ng**
***B·ªë tr√≠ n·ªôi th·∫•t v√† kh√¥ng gian**
***C√¢y c·∫£nh v√† v·∫≠t ph·∫©m phong th·ªßy**

**4. C√ÅC H∆Ø·ªöNG T·ªêT KH√ÅC:**
***Top 3 h∆∞·ªõng t·ªët nh·∫•t** cho ng∆∞·ªùi n√†y
***L√Ω do t·∫°i sao nh·ªØng h∆∞·ªõng n√†y ph√π h·ª£p**
***So s√°nh v·ªõi h∆∞·ªõng hi·ªán t·∫°i**

**5. BI·ªÜN PH√ÅP H√ìA GI·∫¢I (n·∫øu c·∫ßn):**
***C√°ch kh·∫Øc ph·ª•c** n·∫øu h∆∞·ªõng kh√¥ng ho√†n to√†n ph√π h·ª£p
***V·∫≠t ph·∫©m phong th·ªßy** ƒë·ªÉ c·∫£i thi·ªán nƒÉng l∆∞·ª£ng
***Th·ªùi gian t·ªët** ƒë·ªÉ th·ª±c hi·ªán c√°c thay ƒë·ªïi

**6. L·ªúI KHUY√äN T·ªîNG QUAN:**
***K·∫ø ho·∫°ch d√†i h·∫°n** ƒë·ªÉ t·ªëi ∆∞u phong th·ªßy
***Nh·ªØng ƒëi·ªÅu tuy·ªát ƒë·ªëi n√™n tr√°nh**
***C√°ch duy tr√¨ nƒÉng l∆∞·ª£ng t√≠ch c·ª±c**

H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, chi ti·∫øt, th·ª±c t·∫ø v√† d·ªÖ hi·ªÉu. S·ª≠ d·ª•ng ** ƒë·ªÉ in ƒë·∫≠m ti√™u ƒë·ªÅ ch√≠nh, *** cho c√°c ƒëi·ªÉm quan tr·ªçng. ƒê∆∞a ra nh·ªØng l·ªùi khuy√™n c·ª• th·ªÉ c√≥ th·ªÉ √°p d·ª•ng ngay.`;

            const aiResponse = await callGeminiAPI(apiKey, prompt);
            const formattedResponse = formatAIResponse(aiResponse);
            setResult(formattedResponse);

            // Auto scroll to result after successful response
            scrollToResult();

        } catch (error) {
            console.error('Error:', error);
            let errorMessage = 'Xin l·ªói, c√≥ l·ªói x·∫£y ra khi ph√¢n t√≠ch. ';

            if (error.message.includes('503')) {
                errorMessage += 'D·ªãch v·ª• AI ƒëang qu√° t·∫£i, ƒë√£ th·ª≠ l·∫°i 3 l·∫ßn nh∆∞ng kh√¥ng th√†nh c√¥ng. Vui l√≤ng th·ª≠ l·∫°i sau 5-10 ph√∫t.';
            } else if (error.message.includes('429')) {
                errorMessage += 'ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n s·ª≠ d·ª•ng, ƒë√£ th·ª≠ l·∫°i 3 l·∫ßn. Vui l√≤ng th·ª≠ l·∫°i sau 1 gi·ªù.';
            } else if (error.message.includes('400')) {
                errorMessage += 'D·ªØ li·ªáu ƒë·∫ßu v√†o kh√¥ng h·ª£p l·ªá, vui l√≤ng ki·ªÉm tra l·∫°i th√¥ng tin.';
            } else {
                errorMessage += 'Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng v√† th·ª≠ l·∫°i.';
            }

            setResult(errorMessage);
            scrollToResult(); // Also scroll to error message
        } finally {
            setLoading(false);
        }
    };

    const toggleFaq = (index) => {
        setActiveFaq(activeFaq === index ? null : index);
    };

    return (
        <div className="page-wrapper">
            <Header />

            <main className="main-content">
                {/* Hero Section */}
                <section className="section section-gradient">
                    <div className="container">
                        <div className="section-title">H∆∞·ªõng Nh√† H·ª£p Tu·ªïi</div>
                        <div className="section-subtitle">
                            T√¨m hi·ªÉu h∆∞·ªõng nh√† ph√π h·ª£p v·ªõi tu·ªïi t√°c theo phong th·ªßy B√°t Tr·∫°ch
                        </div>

                        <div style={{
                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                            borderRadius: '12px',
                            padding: '1.5rem',
                            margin: '2rem auto',
                            maxWidth: '600px',
                            textAlign: 'center',
                            color: 'white',
                            boxShadow: '0 8px 32px rgba(102, 126, 234, 0.3)'
                        }}>
                            <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', gap: '0.5rem', marginBottom: '0.5rem' }}>
                                <i className="fas fa-robot" style={{ fontSize: '1.2rem' }}></i>
                                <strong>S·ª≠ d·ª•ng AI Phong Th·ªßy Chuy√™n S√¢u</strong>
                            </div>
                            <p style={{ margin: 0, opacity: 0.9, fontSize: '0.95rem' }}>
                                Ph√¢n t√≠ch theo h·ªá th·ªëng B√°t Tr·∫°ch truy·ªÅn th·ªëng k·∫øt h·ª£p c√¥ng ngh·ªá hi·ªán ƒë·∫°i
                            </p>
                        </div>
                    </div>
                </section>

                {/* Input Form Section */}
                <section className="section">
                    <div className="container">
                        <div className="card" style={{ maxWidth: '700px', margin: '0 auto' }}>
                            <div className="card-header">
                                <h3>
                                    <i className="fas fa-compass"></i>
                                    Th√¥ng Tin C·∫ßn Thi·∫øt
                                </h3>
                                <p>Nh·∫≠p th√¥ng tin ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n h∆∞·ªõng nh√† h·ª£p tu·ªïi</p>
                            </div>

                            <div className="card-body">
                                {/* Birth Date Section */}
                                <div style={{ marginBottom: '1.5rem' }}>
                                    <label style={{
                                        display: 'block',
                                        marginBottom: '0.5rem',
                                        fontWeight: '600',
                                        color: '#2d3748'
                                    }}>
                                        Ng√†y sinh <span style={{ color: '#e53e3e' }}>*</span>
                                    </label>
                                    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr 2fr', gap: '1rem' }}>
                                        <select
                                            name="ngaySinh"
                                            value={formData.ngaySinh}
                                            onChange={handleInputChange}
                                            style={{
                                                padding: '0.75rem',
                                                border: '2px solid #e2e8f0',
                                                borderRadius: '8px',
                                                fontSize: '1rem',
                                                outline: 'none',
                                                background: 'white',
                                                transition: 'border-color 0.3s ease'
                                            }}
                                            onFocus={(e) => e.target.style.borderColor = '#667eea'}
                                            onBlur={(e) => e.target.style.borderColor = '#e2e8f0'}
                                        >
                                            {days.map(day => (
                                                <option key={day.value} value={day.value}>
                                                    {day.label}
                                                </option>
                                            ))}
                                        </select>

                                        <select
                                            name="thangSinh"
                                            value={formData.thangSinh}
                                            onChange={handleInputChange}
                                            style={{
                                                padding: '0.75rem',
                                                border: '2px solid #e2e8f0',
                                                borderRadius: '8px',
                                                fontSize: '1rem',
                                                outline: 'none',
                                                background: 'white',
                                                transition: 'border-color 0.3s ease'
                                            }}
                                            onFocus={(e) => e.target.style.borderColor = '#667eea'}
                                            onBlur={(e) => e.target.style.borderColor = '#e2e8f0'}
                                        >
                                            {months.map(month => (
                                                <option key={month.value} value={month.value}>
                                                    {month.label}
                                                </option>
                                            ))}
                                        </select>

                                        <input
                                            type="number"
                                            name="namSinh"
                                            value={formData.namSinh}
                                            onChange={handleInputChange}
                                            placeholder="NƒÉm sinh (VD: 1990)"
                                            min="1900"
                                            max="2024"
                                            style={{
                                                padding: '0.75rem',
                                                border: '2px solid #e2e8f0',
                                                borderRadius: '8px',
                                                fontSize: '1rem',
                                                outline: 'none',
                                                transition: 'border-color 0.3s ease'
                                            }}
                                            onFocus={(e) => e.target.style.borderColor = '#667eea'}
                                            onBlur={(e) => e.target.style.borderColor = '#e2e8f0'}
                                        />
                                    </div>
                                </div>

                                <div style={{ marginBottom: '1.5rem' }}>
                                    <label style={{
                                        display: 'block',
                                        marginBottom: '0.5rem',
                                        fontWeight: '600',
                                        color: '#2d3748'
                                    }}>
                                        Gi·ªõi t√≠nh
                                    </label>
                                    <div style={{ display: 'grid', gridTemplateColumns: '1fr 1fr', gap: '1rem' }}>
                                        <label style={{
                                            display: 'flex',
                                            alignItems: 'center',
                                            padding: '0.75rem',
                                            border: '2px solid #e2e8f0',
                                            borderRadius: '8px',
                                            cursor: 'pointer',
                                            transition: 'all 0.3s ease',
                                            background: formData.gioiTinh === 'nam' ? '#667eea' : 'white',
                                            color: formData.gioiTinh === 'nam' ? 'white' : '#4a5568'
                                        }}>
                                            <input
                                                type="radio"
                                                name="gioiTinh"
                                                value="nam"
                                                checked={formData.gioiTinh === 'nam'}
                                                onChange={handleInputChange}
                                                style={{ display: 'none' }}
                                            />
                                            <i className="fas fa-mars" style={{ marginRight: '0.5rem' }}></i>
                                            Nam
                                        </label>

                                        <label style={{
                                            display: 'flex',
                                            alignItems: 'center',
                                            padding: '0.75rem',
                                            border: '2px solid #e2e8f0',
                                            borderRadius: '8px',
                                            cursor: 'pointer',
                                            transition: 'all 0.3s ease',
                                            background: formData.gioiTinh === 'n·ªØ' ? '#667eea' : 'white',
                                            color: formData.gioiTinh === 'n·ªØ' ? 'white' : '#4a5568'
                                        }}>
                                            <input
                                                type="radio"
                                                name="gioiTinh"
                                                value="n·ªØ"
                                                checked={formData.gioiTinh === 'n·ªØ'}
                                                onChange={handleInputChange}
                                                style={{ display: 'none' }}
                                            />
                                            <i className="fas fa-venus" style={{ marginRight: '0.5rem' }}></i>
                                            N·ªØ
                                        </label>
                                    </div>
                                </div>

                                <div style={{ marginBottom: '2rem' }}>
                                    <label style={{
                                        display: 'block',
                                        marginBottom: '0.5rem',
                                        fontWeight: '600',
                                        color: '#2d3748'
                                    }}>
                                        H∆∞·ªõng nh√† hi·ªán t·∫°i <span style={{ color: '#e53e3e' }}>*</span>
                                    </label>
                                    <select
                                        name="huongNha"
                                        value={formData.huongNha}
                                        onChange={handleInputChange}
                                        style={{
                                            width: '100%',
                                            padding: '0.75rem',
                                            border: '2px solid #e2e8f0',
                                            borderRadius: '8px',
                                            fontSize: '1rem',
                                            outline: 'none',
                                            background: 'white',
                                            transition: 'border-color 0.3s ease'
                                        }}
                                        onFocus={(e) => e.target.style.borderColor = '#667eea'}
                                        onBlur={(e) => e.target.style.borderColor = '#e2e8f0'}
                                    >
                                        <option value="">Ch·ªçn h∆∞·ªõng nh√†</option>
                                        {directions.map(direction => (
                                            <option key={direction.value} value={direction.value}>
                                                {direction.icon} {direction.label} - {direction.description}
                                            </option>
                                        ))}
                                    </select>
                                    <small style={{ color: '#64748b', fontSize: '0.9rem', marginTop: '0.5rem', display: 'block' }}>
                                        H∆∞·ªõng c·ªßa c·ª≠a ch√≠nh khi ƒë·ª©ng trong nh√† nh√¨n ra ngo√†i
                                    </small>
                                </div>

                                <button
                                    onClick={consultGemini}
                                    disabled={loading}
                                    style={{
                                        width: '100%',
                                        padding: '1rem',
                                        background: loading ? '#cbd5e0' : 'linear-gradient(135deg, #667eea, #764ba2)',
                                        color: 'white',
                                        border: 'none',
                                        borderRadius: '8px',
                                        fontSize: '1.1rem',
                                        fontWeight: '600',
                                        cursor: loading ? 'not-allowed' : 'pointer',
                                        transition: 'all 0.3s ease',
                                        display: 'flex',
                                        alignItems: 'center',
                                        justifyContent: 'center',
                                        gap: '0.5rem',
                                        boxShadow: loading ? 'none' : '0 4px 16px rgba(102, 126, 234, 0.3)',
                                        transform: loading ? 'none' : 'translateY(0)',
                                    }}
                                    onMouseEnter={(e) => {
                                        if (!loading) {
                                            e.target.style.transform = 'translateY(-2px)';
                                            e.target.style.boxShadow = '0 6px 20px rgba(102, 126, 234, 0.4)';
                                        }
                                    }}
                                    onMouseLeave={(e) => {
                                        if (!loading) {
                                            e.target.style.transform = 'translateY(0)';
                                            e.target.style.boxShadow = '0 4px 16px rgba(102, 126, 234, 0.3)';
                                        }
                                    }}
                                >
                                    {loading ? (
                                        <>
                                            <i className="fas fa-spinner fa-spin"></i>
                                            ƒêang ph√¢n t√≠ch h∆∞·ªõng nh√†...
                                        </>
                                    ) : (
                                        <>
                                            <i className="fas fa-magic"></i>
                                            T∆∞ V·∫•n H∆∞·ªõng Nh√†
                                        </>
                                    )}
                                </button>
                            </div>
                        </div>
                    </div>
                </section>

                {/* Result Section */}
                {result && (
                    <section className="section" ref={resultRef}>
                        <div className="container">
                            <div className="card">
                                <div className="card-header">
                                    <h3>
                                        <i className="fas fa-lightbulb"></i>
                                        K·∫øt Qu·∫£ Ph√¢n T√≠ch H∆∞·ªõng Nh√†
                                    </h3>
                                    <p>T∆∞ v·∫•n chi ti·∫øt t·ª´ chuy√™n gia phong th·ªßy AI</p>
                                </div>
                                <div className="card-body">
                                    <div style={{
                                        background: 'linear-gradient(135deg, #f8fafc 0%, #e2e8f0 100%)',
                                        padding: '2rem',
                                        borderRadius: '12px',
                                        border: '1px solid #cbd5e0',
                                        lineHeight: '1.8',
                                        fontFamily: 'inherit',
                                        fontSize: '1rem',
                                        color: '#2d3748'
                                    }} dangerouslySetInnerHTML={{ __html: result }}>
                                    </div>

                                    <div style={{
                                        marginTop: '1.5rem',
                                        padding: '1rem',
                                        background: '#e3f2fd',
                                        border: '1px solid #2196f3',
                                        borderRadius: '8px',
                                        color: '#1565c0'
                                    }}>
                                        <div style={{ display: 'flex', alignItems: 'center', gap: '0.5rem', marginBottom: '0.5rem' }}>
                                            <i className="fas fa-info-circle"></i>
                                            <strong>L∆∞u √Ω quan tr·ªçng:</strong>
                                        </div>
                                        <p style={{ margin: 0, fontSize: '0.95rem', lineHeight: '1.6' }}>
                                            K·∫øt qu·∫£ n√†y d·ª±a tr√™n phong th·ªßy truy·ªÅn th·ªëng v√† ch·ªâ mang t√≠nh tham kh·∫£o.
                                            ƒê·ªÉ c√≥ k·∫øt qu·∫£ ch√≠nh x√°c nh·∫•t, n√™n k·∫øt h·ª£p v·ªõi vi·ªác xem ƒë·ªãa th·∫ø,
                                            m√¥i tr∆∞·ªùng xung quanh v√† tham kh·∫£o √Ω ki·∫øn chuy√™n gia phong th·ªßy.
                                        </p>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </section>
                )}

                {/* Tips Section */}
                <section className="section section-gradient">
                    <div className="container">
                        <div className="section-title">H∆∞·ªõng D·∫´n X√°c ƒê·ªãnh H∆∞·ªõng Nh√†</div>
                        <div className="section-subtitle">
                            C√°ch ƒëo h∆∞·ªõng nh√† ch√≠nh x√°c v√† nh·ªØng l∆∞u √Ω quan tr·ªçng
                        </div>

                        <div className="grid-3" style={{ marginTop: '2rem' }}>
                            <div className="card">
                                <div className="card-body" style={{ textAlign: 'center' }}>
                                    <div className="icon-circle icon-blue" style={{ margin: '0 auto 1rem' }}>
                                        <i className="fas fa-compass"></i>
                                    </div>
                                    <h4 style={{ color: '#2d3748', marginBottom: '1rem' }}>S·ª≠ D·ª•ng La B√†n</h4>
                                    <p style={{ color: '#64748b', lineHeight: '1.6', margin: 0 }}>
                                        ƒê·ª©ng ·ªü c·ª≠a ch√≠nh, quay m·∫∑t ra ngo√†i v√† s·ª≠ d·ª•ng la b√†n ho·∫∑c app tr√™n ƒëi·ªán tho·∫°i
                                        ƒë·ªÉ x√°c ƒë·ªãnh h∆∞·ªõng. ƒêo √≠t nh·∫•t 3 l·∫ßn ƒë·ªÉ c√≥ k·∫øt qu·∫£ ch√≠nh x√°c.
                                    </p>
                                </div>
                            </div>

                            <div className="card">
                                <div className="card-body" style={{ textAlign: 'center' }}>
                                    <div className="icon-circle icon-green" style={{ margin: '0 auto 1rem' }}>
                                        <i className="fas fa-sun"></i>
                                    </div>
                                    <h4 style={{ color: '#2d3748', marginBottom: '1rem' }}>Quan S√°t M·∫∑t Tr·ªùi</h4>
                                    <p style={{ color: '#64748b', lineHeight: '1.6', margin: 0 }}>
                                        M·∫∑t tr·ªùi m·ªçc ·ªü h∆∞·ªõng ƒê√¥ng, l·∫∑n ·ªü h∆∞·ªõng T√¢y. V√†o bu·ªïi tr∆∞a,
                                        m·∫∑t tr·ªùi ·ªü ph√≠a Nam. D·ª±a v√†o ƒë√≥ ƒë·ªÉ x√°c ƒë·ªãnh h∆∞·ªõng nh√† m·ªôt c√°ch t∆∞∆°ng ƒë·ªëi.
                                    </p>
                                </div>
                            </div>

                            <div className="card">
                                <div className="card-body" style={{ textAlign: 'center' }}>
                                    <div className="icon-circle icon-gradient" style={{ margin: '0 auto 1rem' }}>
                                        <i className="fas fa-exclamation-triangle"></i>
                                    </div>
                                    <h4 style={{ color: '#2d3748', marginBottom: '1rem' }}>L∆∞u √ù Quan Tr·ªçng</h4>
                                    <p style={{ color: '#64748b', lineHeight: '1.6', margin: 0 }}>
                                        Tr√°nh ƒëo g·∫ßn ƒë·ªì v·∫≠t kim lo·∫°i, √¥ t√¥ ho·∫∑c thi·∫øt b·ªã ƒëi·ªán t·ª≠.
                                        H∆∞·ªõng nh√† l√† h∆∞·ªõng c·ª≠a ch√≠nh, kh√¥ng ph·∫£i h∆∞·ªõng c·ªßa cƒÉn ph√≤ng.
                                    </p>
                                </div>
                            </div>
                        </div>

                        {/* Direction Benefits */}
                        <div style={{ marginTop: '3rem' }}>
                            <h3 style={{ textAlign: 'center', color: '#2d3748', marginBottom: '2rem' }}>
                                T√°c ƒê·ªông C·ªßa C√°c H∆∞·ªõng Nh√†
                            </h3>

                            <div className="grid-2">
                                <div className="card">
                                    <div className="card-body">
                                        <h4 style={{ color: '#667eea', marginBottom: '1rem', display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                                            <i className="fas fa-chart-line"></i>
                                            H∆∞·ªõng T·ªët (C√°t H∆∞·ªõng)
                                        </h4>
                                        <ul style={{ color: '#4a5568', lineHeight: '1.6', paddingLeft: '1.5rem' }}>
                                            <li style={{ marginBottom: '0.5rem' }}>Mang l·∫°i s·ª©c kh·ªèe d·ªìi d√†o, tinh th·∫ßn s·∫£ng kho√°i</li>
                                            <li style={{ marginBottom: '0.5rem' }}>T√†i v·∫≠n th·ªãnh v∆∞·ª£ng, c√¥ng vi·ªác thu·∫≠n l·ª£i</li>
                                            <li style={{ marginBottom: '0.5rem' }}>Gia ƒë√¨nh h·∫°nh ph√∫c, con c√°i h·ªçc gi·ªèi</li>
                                            <li style={{ marginBottom: '0.5rem' }}>Nh·∫≠n ƒë∆∞·ª£c s·ª± gi√∫p ƒë·ª° t·ª´ qu√Ω nh√¢n</li>
                                        </ul>
                                    </div>
                                </div>

                                <div className="card">
                                    <div className="card-body">
                                        <h4 style={{ color: '#e53e3e', marginBottom: '1rem', display: 'flex', alignItems: 'center', gap: '0.5rem' }}>
                                            <i className="fas fa-exclamation-circle"></i>
                                            H∆∞·ªõng X·∫•u (Hung H∆∞·ªõng)
                                        </h4>
                                        <ul style={{ color: '#4a5568', lineHeight: '1.6', paddingLeft: '1.5rem' }}>
                                            <li style={{ marginBottom: '0.5rem' }}>D·ªÖ g·∫∑p b·ªánh t·∫≠t, stress, m·ªát m·ªèi</li>
                                            <li style={{ marginBottom: '0.5rem' }}>T√†i ch√≠nh b·∫•p b√™nh, c√¥ng vi·ªác tr·ª•c tr·∫∑c</li>
                                            <li style={{ marginBottom: '0.5rem' }}>Gia ƒë√¨nh b·∫•t h√≤a, m√¢u thu·∫´n nhi·ªÅu</li>
                                            <li style={{ marginBottom: '0.5rem' }}>G·∫∑p ti·ªÉu nh√¢n, th·ªã phi phi·ªÅn to√°i</li>
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>

                {/* FAQ Section */}
                <section className="section">
                    <div className="container">
                        <div className="section-title">C√¢u H·ªèi Th∆∞·ªùng G·∫∑p</div>
                        <div className="section-subtitle">
                            Nh·ªØng th·∫Øc m·∫Øc ph·ªï bi·∫øn v·ªÅ h∆∞·ªõng nh√† h·ª£p tu·ªïi
                        </div>

                        <div style={{ maxWidth: '800px', margin: '0 auto' }}>
                            {faqData.map((faq, index) => (
                                <div key={index} className={`faq-item ${activeFaq === index ? 'active' : ''}`}>
                                    <div className="faq-question" onClick={() => toggleFaq(index)}>
                                        <h4>{faq.question}</h4>
                                        <i className={`fas ${activeFaq === index ? 'fa-chevron-up' : 'fa-chevron-down'} faq-icon`}></i>
                                    </div>
                                    <div className="faq-answer">
                                        <p>{faq.answer}</p>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                </section>

                {/* Contact CTA */}
                <section className="section section-alt">
                    <div className="container">
                        <div className="card" style={{
                            textAlign: 'center',
                            maxWidth: '600px',
                            margin: '0 auto',
                            background: 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)',
                            color: 'white',
                            border: 'none'
                        }}>
                            <div className="card-body" style={{ padding: '3rem 2rem' }}>
                                <div className="icon-circle" style={{
                                    background: 'rgba(255,255,255,0.2)',
                                    color: 'white',
                                    margin: '0 auto 1.5rem',
                                    width: '80px',
                                    height: '80px',
                                    fontSize: '2rem'
                                }}>
                                    <i className="fas fa-user-tie"></i>
                                </div>
                                <h3 style={{ marginBottom: '1rem', fontSize: '1.5rem' }}>
                                    C·∫ßn T∆∞ V·∫•n Chuy√™n S√¢u?
                                </h3>
                                <p style={{
                                    marginBottom: '2rem',
                                    opacity: 0.9,
                                    fontSize: '1.1rem',
                                    lineHeight: '1.6'
                                }}>
                                    Li√™n h·ªá v·ªõi chuy√™n gia phong th·ªßy ƒë·ªÉ ƒë∆∞·ª£c t∆∞ v·∫•n chi ti·∫øt v·ªÅ
                                    h∆∞·ªõng nh√†, b·ªë tr√≠ n·ªôi th·∫•t v√† c√°ch c·∫£i thi·ªán v·∫≠n kh√≠
                                </p>
                                <div style={{ display: 'flex', gap: '1rem', justifyContent: 'center', flexWrap: 'wrap' }}>
                                    <a
                                        href="tel:0123456789"
                                        style={{
                                            display: 'inline-flex',
                                            alignItems: 'center',
                                            gap: '0.5rem',
                                            padding: '0.75rem 1.5rem',
                                            background: 'rgba(255,255,255,0.2)',
                                            color: 'white',
                                            textDecoration: 'none',
                                            borderRadius: '8px',
                                            transition: 'all 0.3s ease',
                                            fontWeight: '600'
                                        }}
                                        onMouseEnter={(e) => {
                                            e.target.style.background = 'rgba(255,255,255,0.3)';
                                            e.target.style.transform = 'translateY(-2px)';
                                        }}
                                        onMouseLeave={(e) => {
                                            e.target.style.background = 'rgba(255,255,255,0.2)';
                                            e.target.style.transform = 'translateY(0)';
                                        }}
                                    >
                                        <i className="fas fa-phone"></i>
                                        G·ªçi T∆∞ V·∫•n
                                    </a>
                                    <a
                                        href="https://zalo.me/0123456789"
                                        style={{
                                            display: 'inline-flex',
                                            alignItems: 'center',
                                            gap: '0.5rem',
                                            padding: '0.75rem 1.5rem',
                                            background: 'rgba(255,255,255,0.2)',
                                            color: 'white',
                                            textDecoration: 'none',
                                            borderRadius: '8px',
                                            transition: 'all 0.3s ease',
                                            fontWeight: '600'
                                        }}
                                        onMouseEnter={(e) => {
                                            e.target.style.background = 'rgba(255,255,255,0.3)';
                                            e.target.style.transform = 'translateY(-2px)';
                                        }}
                                        onMouseLeave={(e) => {
                                            e.target.style.background = 'rgba(255,255,255,0.2)';
                                            e.target.style.transform = 'translateY(0)';
                                        }}
                                    >
                                        <i className="fab fa-facebook-messenger"></i>
                                        Chat Zalo
                                    </a>
                                </div>
                            </div>
                        </div>
                    </div>
                </section>

                <CTAContent />
            </main>

            <Footer />
            <FloatButtons />
        </div>
    );
};

export default HuongNhaHopTuoiPage;